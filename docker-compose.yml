version: '3'
networks:
  my_network:

services:
#  my-app:
#    build: ./ # Dockerfile 위치
#    environment:
#      OTEL_TRACES_EXPORTER: "otlp, zipkin"
#      OTEL_METRICS_EXPORTER: "prometheus"
#      OTEL_EXPORTER_OTLP_ENDPOINT: "localhost:4317"
#      OTEL_EXPORTER_ZIPKIN_ENDPOINT: "localhost:9411/api/v2/spans"
#      OTEL_EXPORTER_PROMETHEUS_HOST: "localhost"
#      OTEL_EXPORTER_PROMETHEUS_PORT: "9464"
#      OTEL_LOGGING_EXPORTER: "logging"
#    depends_on:
#      - broker
#      - schema-registry
#      - mysql
#      - redis
#      - jaeger
#      - zipkin
#    ports:
#      - "8080:8080"

  mysql:
    image: mysql:8.0
    environment:
      - MYSQL_ROOT_PASSWORD=1234
      - MYSQL_DATABASE=test
    ports:
      - "13306:3306"
    volumes:
#      - mysql-data:/var/lib/mysql
#      - mysql-log:/var/log/mysql
      - ./my-db-init-scripts:/docker-entrypoint-initdb.d

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    environment:
      - REDIS_HOST=localhost
      - REDIS_PORT=6379

  broker:
    image: confluentinc/cp-kafka:7.8.0
    hostname: broker
    container_name: broker
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      # Replace CLUSTER_ID with a unique base64 UUID using "bin/kafka-storage.sh random-uuid"
      # See https://docs.confluent.io/kafka/operations-tools/kafka-tools.html#kafka-storage-sh
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'

  schema-registry:
    image: confluentinc/cp-schema-registry:7.8.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  jaeger:
    image: jaegertracing/all-in-one:latest
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_GRPC_ENABLED=true # gRPC 포트 활성화
    restart: always
    ports:
      - "16686:16686" # for the Web UI
      - "4317:4317" # for gRPC protocol to send spans
    networks:
      - my_network

  zipkin:
    image: openzipkin/zipkin:latest
    restart: always
    ports:
      - "9411:9411"
    networks:
      - my_network

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    restart: always
    networks:
      - my_network
#    depends_on:
#      my-app

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - ./docker/grafana-datasources.yml:/etc/grafana/provisioning/datasources/grafana-datasources.yml
    restart: always
    depends_on:
      - prometheus
    networks:
      - my_network
#volumes:
#  mysql-data:
#  mysql-log: